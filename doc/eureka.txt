Eureka是Netflix开源的服务发现组件，本身是一个基于REST的服务。它包含Server和Client两部分。
Spring Cloud将它集成在子项目Spring Cloud Netflix中，从而实现微服务的注册与发现。

Eureka Server：提供服务发现的能力，各个微服务启动时，会向Eureka Server注册自己的信息（例如IP、端口、微服务名等），Eureka Server会存储这些信息。

Eureka Client：是一个Java客户端，用于简化与Eureka Server的交互。

微服务启动后，会周期性（默认30s）向Eureka Server发送心跳以续约自己的“租期”。
如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90s）。
默认情况下，Eureka Server同时也是Eureka Client。多个Eureka Server实例，互相之间通过复制的方式，来实现服务注册表中数据的同步。
Eureka Client会缓存服务注册表中的信息。

CAP 定理：C——数据一致性，A——服务可用性，P——服务对网络分区故障的容错性。Eureka遵守 AP 原则。


Eureka的自我保护模式：
	默认情况下，如果Eureka Server在一定时间内没有接受到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。
	当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，但微服务本身是健康的，此时不应该注销这个微服务。
	Eureka通过“自我保护模式”来解决这个问题。
	
	自我保护模式是一种应对网络异常的安全保护措施。
	当Eureka Server节点在短时间内丢失过多客户端时，那么这个节点就会进入自我保护模式。
	一旦进入该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据。
	当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。
	
	使用eureka.server.enable-self-preservation = fase禁用自我保护模式。

多网卡环境下的IP选择：
	忽略指定名称的网卡：
		spring.cloud.inetutils.ignored-interfaces=eth0
		eureka.instance.prefer-ip-address=true
	指定使用的网络地址：
		spring.cloud.inetutils.preferred-networks=10.167
		eureka.instance.prefer-ip-address=true
	只使用站点本地地址：
		spring.cloud.inetutils.use-only-site-local-interfaces=true
		eureka.instance.prefer-ip-address=true
	手动指定IP地址：
		eureka.instance.ip-address=127.0.0.1
		eureka.instance.prefer-ip-address=true

Eureka的健康检查：
	eureka.client.healthcheck.enabled=true

Hystrix：
	Hystrix实现了断路器的模式。断路器本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控，向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。
	在请求失败频率较低的情况下，Hystrix 还是会直接把故障返回给客户端。只有当失败次数达到阈值时，断路器打开并且不进行后续通信，而是直接返回备选响应。
	
	分布式系统中经常会出现某个基础服务不可用造成整个系统不可用的情况，这种现象被称为服务雪崩效应。为了应对服务雪崩，一种常见的做法是手动服务降级。而 Hystrix 的出现，给我们提供了另一种选择。
	
Hystrix Dashboard：
	Hystrix 会持续地记录所有通过 Hystrix 发起的请求的执行信息，并以统计报表和图形的形式展示给用户。


方志朋的博客  https://www.fangzhipeng.com/archive/?tag=SpringCloud
禁忌夜色153 https://www.cnblogs.com/jinjiyese153/category/1182033.html
一抹书香  https://www.cnblogs.com/chenweida/p/9025610.html
		